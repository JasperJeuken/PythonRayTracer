# Custom libraries
from color import Color
from vec3 import Vec3
from perlin import Perlin
from utils import clamp

# 3rd party library
from math import sin
from PIL import Image # Used for importing image


class Texture:
    '''Parent class for storing textures'''

    def __init__(self):
        pass

    def value(self, u, v, p):
        pass


class SolidColor(Texture):
    '''Single-color texture'''

    def __init__(self, color):
        self.color = color

    def value(self, u, v, p):
        return self.color


class CheckerTexture(Texture):
    '''Two-color texture with a checker pattern, described by some scale'''

    def __init__(self, t0, t1, scl=10):
        if isinstance(t0, Color) or isinstance(t0, Vec3):
            self.even = SolidColor(t0)
            self.odd  = SolidColor(t1)
        else:
            self.even = t0
            self.odd  = t1
        self.scl = scl

    def value(self, u, v, p):
        sines = sin(self.scl * p.x) * sin(self.scl * p.y) * sin(self.scl * p.z)
        if sines < 0:
            return self.odd.value(u, v, p)
        else:
            return self.even.value(u, v, p)


class NoiseTexture(Texture):
    '''Texture generated by a custom Perlin noise generator'''

    def __init__(self, scale=1):
        self.noise = Perlin()
        self.scale = scale

    def value(self, u, v, p):
        return Color(1, 1, 1) * 0.5 * (1.0 + sin(self.scale * p.z + 10 * self.noise.turb(p))) # Marble texture using Perlin noise
        #return Color(1, 1, 1) * self.noise.turb(self.scale * p)                # Turbulent Perlin noise
        #return Color(1, 1, 1) * 0.5 * (1.0 + self.noise.noise(self.scale * p)) # Regular Perlin noise


class ImageTexture(Texture):
    '''Image texture, imported with its filename'''

    def __init__(self, filename=None):
        if filename is None:
            self.data = None
            self.width = 0
            self.height = 0
        else:
            self.load_img(filename)

    def load_img(self, filename):
        try:
            self.data = Image.open(filename)
            self.width, self.height = self.data.size
        except:
            self.data = None
            self.width = 0
            self.height = 0

    def value(self, u, v, p):
        if self.data is None:
            return Color(0, 1, 1)
        
        u = clamp(u, 0.0, 1.0)
        v = 1.0 - clamp(v, 0.0, 1.0)

        i = int(u * self.width)
        j = int(v * self.height)

        if i >= self.width:
            i = self.width - 1
        if j >= self.height:
            j = self.height - 1
        
        scl = 1 / 255
        r, g, b = self.data.getpixel((i, j))

        return Color(r * scl, g * scl, b * scl)